import React, {useEffect, useRef, useState} from 'react';
import {citiesAPI} from 'api/apiAxios'
import {ModalWindow} from 'components/ModalWindow'

import s from './Form.module.scss';

export const Form = ({citiesListProps}) => {
    //toggle для стартовой загрузки
    let disabledToggle = !citiesListProps.length;

    //получение ссылок input-ов
    let selectRefCity = useRef();
    let selectRefDay = useRef();
    let selectRefTime = useRef();
    //хранение дней и часов в массивах, после фильтрации и поиска, для дальнейшего мапинга
    let days = [];
    let time = [];

    //управление модальным окном после успешного сохранения
    const [modalShow, setModalShow] = useState(false);

    //-------------------------------------------------------
    const [vacantTime, setVacantTime] = useState([])
    const [data_and_time, setData_and_time] = useState()
    const [userPhone, setUserPhone] = useState('');
    const [userName, setUserName] = useState('')
    const [cityData, setCityData] = useState({
        "id": "5b3480ee3200009f28d1e421",
        "name": "Владивосток",
        "address": "ул. Первая 1, ст. 3",
        "phones": ["79991233232", "79996667676"],
        "price": 12000
    })
    //отслеживание пустых полей после потери фокуса
    const [accessWarningForName, setAccessWarningForName] = useState()
    const [accessWarningForPhone, setAccessWarningForPhone] = useState()
    const activateWarningForName = () => {
        setAccessWarningForName(true)
    }
    const activateWarningForPhone = () => {
        setAccessWarningForPhone(true)
    }

    //сортировка дней в которых нет доступных часов
    for (let prop1 in data_and_time) {
        for (let prop2 in data_and_time[prop1]) {
            if (data_and_time[prop1][prop2].is_not_free !== true) {
                days.push(data_and_time[prop1][prop2].day)
                time.push(data_and_time[prop1][prop2])
            }
        }
        ;
    }
    //переключатель активности кнопки отправки
    let accessToButtonPress = userName.length && userPhone.length && selectRefDay.current.value.length && selectRefTime.current.value.length

    let setCity = () => {
        setCityData(citiesListProps.find(city => city.name === selectRefCity.current.value))
    }
    let setVacantTimeByDay = () => {
        setVacantTime(time.filter(d => d.day === selectRefDay.current.value))
    }

    //получение города по id
    useEffect(() => {
        citiesAPI.getDataByID(cityData.id).then(data => setData_and_time(data.data))
    }, [cityData]);

    let vacantDaysList = Array.from(new Set(days));
    //функция при submit-е формы, сохранение в localStorage, модальное окно и очистка формы
    const submiteButtonFunc = (e) => {
        e.preventDefault()
        localStorage.setItem(`Заявка от ${userPhone}`,
            JSON.stringify({
                city: selectRefCity.current.value,
                day: selectRefDay.current.value,
                time: selectRefTime.current.value,
                name: userName,
                phone: userPhone,
            })
        )
        setUserName('')
        setUserPhone('')
        selectRefDay.current.value = '';
        selectRefTime.current.value = '';
        setAccessWarningForName(false)
        setAccessWarningForPhone(false)
        setModalShow(true)
    }
    //------------------------------------------------------------

    return (
        <>
            <form onSubmit={submiteButtonFunc}
                  className=
                      {!citiesListProps.length ? s.mainWrapper + " " + s.opacityOn : s.mainWrapper}>
                <select
                    disabled={disabledToggle}
                    className={s.inputItem}
                    ref={selectRefCity} onChange={setCity}
                >
                    {citiesListProps.map(c => <option value={c.name} key={c.id}>{c.name}</option>)}
                </select>

                <div className={s.cityData}>
                    <p>{cityData.address}</p>
                    <p>{cityData.phones.join(', ')}</p>
                    <p>{`Стоимость услуги ${cityData.price} ₽`}</p>
                </div>

                <div className={s.data_and_time}>
                    <select ref={selectRefDay} onChange={setVacantTimeByDay} disabled={disabledToggle}
                            className={s.inputItem} name="pets" id="pet-select">
                        <option value="">День</option>
                        {vacantDaysList.map(d => <option key={d} value={d}>{d}</option>)}
                    </select>

                    <select disabled={disabledToggle} ref={selectRefTime} className={s.inputItem} name="pets"
                            id="pet-select">
                        <option value="">Время</option>
                        {vacantTime.map(h => <option key={h.begin}>{h.begin}-{h.end}</option>)}
                    </select>
                </div>

                <input disabled={disabledToggle}
                       value={userPhone} onBlur={activateWarningForPhone}
                       onChange={(e) => setUserPhone(e.currentTarget.value)}
                       className={accessWarningForPhone && !userPhone.length ? s.inputItem + ' ' + s.warning : s.inputItem}
                       type="text" placeholder='+7(___)__ __'/>
                <p style={{display: accessWarningForPhone && !userPhone.length ? "block" : "none"}}
                   className={s.warningUnderInput}>Пожалуйста, введите корректный телефон, иначе специалисты не смогут
                    связаться с вами</p>

                <input disabled={disabledToggle} onChange={(e) => setUserName(e.currentTarget.value)}
                       value={userName} onBlur={activateWarningForName}
                       className={accessWarningForName && !userName.length ? s.inputItem + ' ' + s.warning : s.inputItem}
                       type="text" placeholder='Ваше имя'/>
                <p style={{display: accessWarningForName && !userName.length ? "block" : "none"}}
                   className={s.warningUnderInput}>Пожалуйста, укажите имя</p>

                {/*className={!accessToPress ? s.button + " " + s.accessTrue : s.button}*/}
                <button onClick={submiteButtonFunc} disabled={!accessToButtonPress}
                        className={accessToButtonPress ? s.button + " " + s.accessTrue : s.button}>Записаться
                </button>

                <ModalWindow show={modalShow} onHide={() => setModalShow(false)}/>
            </form>

        </>
    );
}
